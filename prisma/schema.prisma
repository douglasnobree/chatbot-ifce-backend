// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para estudantes
model Estudante {
  id           String      @id @default(uuid())
  nome         String
  telefone     String      @unique
  email        String      @unique
  curso        String
  escolhaSetor String?
  sessoes      Sessao[]
  protocolos   Protocolo[]
}

model WhatsAppSession {
  id              Int     @id
  InstanceName    String  @unique @default("1")
  numero_telefone String  @unique
  status          Boolean
  jwt_token       String  @unique
}

// Modelo para atendentes
model Atendente {
  id            String   @id @default(uuid())
  nome          String
  email         String   @unique
  cargo         String?
  departamento  String?
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

  // Relacionamentos
  sessoes    Sessao[]
  protocolos Protocolo[]
}

enum SessionState {
  MAIN_MENU
  PROTOCOLO_MENU
  CONSULTAR_MATRICULA
  ASSISTENCIA_ESTUDANTIL
  CURSOS_INGRESSO
  COMUNICACAO_SETORES
  ESPERANDO_CPF_TELEFONE
  RESULTADO_CONSULTA
  TRANCAMENTO_REABERTURA
  EMITIR_DOCUMENTOS
  JUSTIFICAR_FALTAS
  ACOMPANHAR_PROCESSOS
  CONSULTANDO_PROTOCOLO
  REGISTRO_DOCUMENTO_PENDENTE
  AGUARDANDO_RESPOSTA_SETOR
  ATENDIMENTO_HUMANO
  ENCERRAMENTO
  EXPIRED
  AGUARDANDO_DADOS_ATENDIMENTO
}

// Modelo para sessões de chat
model Sessao {
  id                 String       @id @default(uuid())
  userId             String // ID do usuário no WhatsApp (ex: 5588999999999@s.whatsapp.net)
  estado             SessionState // Estado atual da sessão (ex: MAIN_MENU, CONSULTAR_MATRICULA)
  ultima_interacao   DateTime     @default(now())
  instanceName       String // ID da instância do WhatsApp
  esperando_resposta Boolean      @default(false)
  criado_em          DateTime     @default(now())
  atualizado_em      DateTime     @updatedAt

  // Relacionamentos
  estudante_id String?
  estudante    Estudante?  @relation(fields: [estudante_id], references: [id])
  atendente_id String?
  atendente    Atendente?  @relation(fields: [atendente_id], references: [id])
  mensagens    Mensagem[]
  protocolos   Protocolo[]
}

// Modelo para mensagens
model Mensagem {
  id        String   @id @default(uuid())
  conteudo  String
  origem    String // "USUARIO" ou "BOT"
  timestamp DateTime @default(now())

  // Relacionamentos
  sessao_id String
  sessao    Sessao @relation(fields: [sessao_id], references: [id])
}

// Modelo para estatísticas de uso do chatbot
model Estatistica {
  id                   String   @id @default(uuid())
  data                 DateTime @default(now()) @db.Date
  total_sessoes        Int      @default(0)
  sessoes_ativas       Int      @default(0)
  duracao_media_sessao Float    @default(0) // em minutos
  data_registro        DateTime @default(now())

  // Relacionamentos
  menu_acessos MenuAcesso[]
}

// Modelo para armazenar estatísticas de acesso aos menus
model MenuAcesso {
  id            String   @id @default(uuid())
  tipo_menu     String // Corresponde ao SessionState
  contagem      Int      @default(0)
  ultimo_acesso DateTime @default(now())

  // Relacionamentos
  estatistica_id String
  estatistica    Estatistica @relation(fields: [estatistica_id], references: [id])
}

// Modelo para armazenar protocolos de atendimento em tempo real
model Protocolo {
  id              String    @id @default(uuid())
  numero          String    @unique // Número do protocolo exibido ao usuário
  status          String    @default("ABERTO") // ABERTO, EM_ATENDIMENTO, FECHADO, CANCELADO
  assunto         String?
  setor           String
  data_criacao    DateTime  @default(now())
  data_fechamento DateTime?

  // Relacionamentos
  sessao_id           String?
  sessao              Sessao?             @relation(fields: [sessao_id], references: [id])
  estudante_id        String?
  estudante           Estudante?          @relation(fields: [estudante_id], references: [id])
  atendente_id        String?
  atendente           Atendente?          @relation(fields: [atendente_id], references: [id])
  mensagens_protocolo MensagemProtocolo[]
}

// Modelo para armazenar as mensagens dos protocolos
model MensagemProtocolo {
  id        String   @id @default(uuid())
  conteudo  String
  origem    String // "USUARIO", "ATENDENTE", "SISTEMA"
  timestamp DateTime @default(now())

  // Relacionamentos
  protocolo_id String
  protocolo    Protocolo @relation(fields: [protocolo_id], references: [id])
}
