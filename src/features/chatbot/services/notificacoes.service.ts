import { Injectable, Logger } from '@nestjs/common';
import { MensagensService } from './mensagens.service';
import { SessionService } from './session.service';
import { Sessao } from '@prisma/client';

@Injectable()
export class NotificacoesService {
  private readonly logger = new Logger(NotificacoesService.name);

  constructor(
    private readonly mensagensService: MensagensService,
    private readonly sessionService: SessionService,
  ) {}

  /**
   * Envia uma notifica√ß√£o de lembrete para o usu√°rio
   * @param session Sess√£o do usu√°rio
   * @param mensagem Mensagem do lembrete
   */
  async enviarLembrete(session: Sessao, mensagem: string): Promise<void> {
    try {
      await this.mensagensService.enviarMensagem(
        session,
        `‚è∞ Lembrete: ${mensagem}`,
      );

      this.logger.log(`Lembrete enviado para usu√°rio ${session.userId}`);
    } catch (error) {
      this.logger.error(
        `Erro ao enviar lembrete: ${error.message}`,
        error.stack,
      );
    }
  }

  /**
   * Envia uma notifica√ß√£o de atualiza√ß√£o de processo
   * @param userId ID do usu√°rio
   * @param numeroProtocolo N√∫mero do protocolo atualizado
   * @param mensagem Mensagem de atualiza√ß√£o
   */
  async notificarAtualizacaoProcesso(
    userId: string,
    numeroProtocolo: string,
    mensagem: string,
  ): Promise<void> {
    try {
      // Recupera a sess√£o do usu√°rio
      const session = await this.sessionService.getLatestSession(userId);

      if (session) {
        await this.mensagensService.enviarMensagem(
          session,
          `üì£ Atualiza√ß√£o do Protocolo #${numeroProtocolo}:\n\n${mensagem}`,
        );

        this.logger.log(
          `Notifica√ß√£o de atualiza√ß√£o de processo enviada para usu√°rio ${userId}`,
        );
      }
    } catch (error) {
      this.logger.error(
        `Erro ao notificar atualiza√ß√£o de processo: ${error.message}`,
        error.stack,
      );
    }
  }

  /**
   * Envia uma mensagem de boas-vindas quando o usu√°rio inicia uma nova sess√£o
   * @param session Sess√£o do usu√°rio
   * @param isReturningUser Se √© um usu√°rio que j√° usou o sistema antes
   */
  async enviarMensagemBoasVindas(
    session: Sessao,
    isReturningUser: boolean,
  ): Promise<void> {
    try {
      let mensagem: string;

      if (isReturningUser) {
        mensagem = `üëã Ol√° novamente, Bem-vindo(a) de volta ao atendimento virtual do IFCE Campus Tabuleiro do Norte.`;
      } else {
        mensagem = `üëã Ol√°! Bem-vindo(a) ao atendimento virtual do IFCE Campus Tabuleiro do Norte.`;
      }

      await this.mensagensService.enviarMensagem(session, mensagem);
    } catch (error) {
      this.logger.error(
        `Erro ao enviar mensagem de boas-vindas: ${error.message}`,
        error.stack,
      );
    }
  }

  /**
   * Envia uma mensagem de inatividade quando o usu√°rio fica muito tempo sem interagir
   * @param session Sess√£o do usu√°rio
   */
  async enviarMensagemInatividade(session: Sessao): Promise<void> {
    try {
      await this.mensagensService.enviarMensagem(
        session,
        `Notei que voc√™ est√° inativo h√° algum tempo. Ainda posso ajudar com algo? Digite uma op√ß√£o ou "0" para voltar ao menu principal.`,
      );

      this.logger.log(`Mensagem de inatividade enviada para ${session.userId}`);
    } catch (error) {
      this.logger.error(
        `Erro ao enviar mensagem de inatividade: ${error.message}`,
        error.stack,
      );
    }
  }
  
}
